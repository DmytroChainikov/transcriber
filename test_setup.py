#!/usr/bin/env python3
"""
–¢–µ—Å—Ç–æ–≤–∏–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω—å —Ç—Ä–∞–Ω—Å–∫—Ä–∏–±–µ—Ä–∞
"""

import os
import sys
from dotenv import load_dotenv
import google.generativeai as genai

def test_configuration():
    """–¢–µ—Å—Ç—É–≤–∞–Ω–Ω—è –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—ó"""
    print("üîß –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—ó...")
    
    # –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è .env
    if not os.path.exists('.env'):
        print("‚ùå –§–∞–π–ª .env –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ!")
        print("   –°–∫–æ–ø—ñ—é–π—Ç–µ .env.example —è–∫ .env —Ç–∞ –∑–∞–ø–æ–≤–Ω—ñ—Ç—å —Å–≤–æ—ó–º–∏ –¥–∞–Ω–∏–º–∏")
        return False
    
    load_dotenv()
    
    # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ API –∫–ª—é—á–∞
    api_key = os.getenv('GEMINI_API_KEY')
    if not api_key or api_key == 'your_gemini_api_key_here':
        print("‚ùå GEMINI_API_KEY –Ω–µ –Ω–∞–ª–∞—à—Ç–æ–≤–∞–Ω–∏–π!")
        print("   –û—Ç—Ä–∏–º–∞–π—Ç–µ –∫–ª—é—á: https://aistudio.google.com/app/apikey")
        return False
    
    
    # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –ø–∞–ø–æ–∫
    audio_folder = os.getenv('AUDIO_FOLDER')
    output_folder = os.getenv('OUTPUT_FOLDER')
    
    if not audio_folder:
        print("‚ùå AUDIO_FOLDER –Ω–µ –Ω–∞–ª–∞—à—Ç–æ–≤–∞–Ω–∏–π!")
        return False
    
    if not output_folder:
        print("‚ùå OUTPUT_FOLDER –Ω–µ –Ω–∞–ª–∞—à—Ç–æ–≤–∞–Ω–∏–π!")
        return False
    
    print(f"‚úÖ API –∫–ª—é—á: {'*' * 10 + api_key[-4:] if len(api_key) > 4 else '****'}")
    print(f"‚úÖ –ü–∞–ø–∫–∞ –∞—É–¥—ñ–æ: {audio_folder}")
    print(f"‚úÖ –ü–∞–ø–∫–∞ –≤–∏–≤–æ–¥—É: {output_folder}")
    
    return True, api_key, audio_folder, output_folder

def test_gemini_api(api_key):
    """–¢–µ—Å—Ç—É–≤–∞–Ω–Ω—è –∑'—î–¥–Ω–∞–Ω–Ω—è –∑ Gemini API"""
    print("\nüåê –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –∑'—î–¥–Ω–∞–Ω–Ω—è –∑ Gemini API...")
    
    try:
        genai.configure(api_key=api_key)
        model = genai.GenerativeModel('gemini-2.5-flash')
        
        # –ü—Ä–æ—Å—Ç–∏–π —Ç–µ—Å—Ç
        response = model.generate_content("–ü—Ä–∏–≤—ñ—Ç! –í—ñ–¥–ø–æ–≤—ñ–¥—å –æ–¥–Ω–∏–º —Å–ª–æ–≤–æ–º: –ü—Ä–∞—Ü—é—î")
        if response.text:
            print("‚úÖ –ó'—î–¥–Ω–∞–Ω–Ω—è –∑ Gemini API —É—Å–ø—ñ—à–Ω–µ!")
            print(f"   –¢–µ—Å—Ç–æ–≤–∞ –≤—ñ–¥–ø–æ–≤—ñ–¥—å: {response.text.strip()}")
            return True
        else:
            print("‚ùå –ù–µ –≤–¥–∞–ª–æ—Å—è –æ—Ç—Ä–∏–º–∞—Ç–∏ –≤—ñ–¥–ø–æ–≤—ñ–¥—å –≤—ñ–¥ API")
            return False
            
    except Exception as e:
        print(f"‚ùå –ü–æ–º–∏–ª–∫–∞ API: {str(e)}")
        return False

def test_folders(audio_folder, output_folder):
    """–ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —Ç–∞ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –ø–∞–ø–æ–∫"""
    print("\nüìÅ –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –ø–∞–ø–æ–∫...")
    
    try:
        # –°—Ç–≤–æ—Ä–µ–Ω–Ω—è –ø–∞–ø–æ–∫ —è–∫—â–æ –Ω–µ —ñ—Å–Ω—É—é—Ç—å
        os.makedirs(audio_folder, exist_ok=True)
        os.makedirs(output_folder, exist_ok=True)
        
        # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø—É –Ω–∞ –∑–∞–ø–∏—Å
        test_file = os.path.join(output_folder, 'test_write.tmp')
        with open(test_file, 'w') as f:
            f.write('test')
        os.remove(test_file)
        
        print(f"‚úÖ –ü–∞–ø–∫–∞ –∞—É–¥—ñ–æ: {audio_folder} (–¥–æ—Å—Ç—É–ø–Ω–∞)")
        print(f"‚úÖ –ü–∞–ø–∫–∞ –≤–∏–≤–æ–¥—É: {output_folder} (–¥–æ—Å—Ç—É–ø–Ω–∞ –¥–ª—è –∑–∞–ø–∏—Å—É)")
        return True
        
    except Exception as e:
        print(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –∑ –ø–∞–ø–∫–∞–º–∏: {str(e)}")
        return False

def main():
    """–ì–æ–ª–æ–≤–Ω–∞ —Ñ—É–Ω–∫—Ü—ñ—è —Ç–µ—Å—Ç—É"""
    print("üß™ –¢–µ—Å—Ç—É–≤–∞–Ω–Ω—è Audio Transcriber")
    print("=" * 40)
    
    # –¢–µ—Å—Ç –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—ó
    config_result = test_configuration()
    if not config_result:
        print("\n‚ùå –¢–µ—Å—Ç –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—ó –Ω–µ –ø—Ä–æ–π–¥–µ–Ω–æ!")
        return 1
    
    _, api_key, audio_folder, output_folder = config_result
    
    # –¢–µ—Å—Ç API
    if not test_gemini_api(api_key):
        print("\n‚ùå –¢–µ—Å—Ç API –Ω–µ –ø—Ä–æ–π–¥–µ–Ω–æ!")
        return 1
    
    # –¢–µ—Å—Ç –ø–∞–ø–æ–∫
    if not test_folders(audio_folder, output_folder):
        print("\n‚ùå –¢–µ—Å—Ç –ø–∞–ø–æ–∫ –Ω–µ –ø—Ä–æ–π–¥–µ–Ω–æ!")
        return 1
    
    print("\n" + "=" * 40)
    print("üéâ –í—Å—ñ —Ç–µ—Å—Ç–∏ –ø—Ä–æ–π–¥–µ–Ω–æ —É—Å–ø—ñ—à–Ω–æ!")
    print("   –ú–æ–∂–µ—Ç–µ –∑–∞–ø—É—Å–∫–∞—Ç–∏ main.py –¥–ª—è –ø–æ—á–∞—Ç–∫—É —Ä–æ–±–æ—Ç–∏")
    print("   –ö–æ–º–∞–Ω–¥–∞: python main.py")
    
    return 0

if __name__ == "__main__":
    sys.exit(main())