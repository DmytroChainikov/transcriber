import os
import logging
from datetime import datetime
import json
from typing import Dict, List, Any, Optional, Union
import google.generativeai as genai
from google_sheets_handler import GoogleSheetsHandler
from google_drive_handler import GoogleDriveHandler


class AudioTranscriber:
    """–ö–ª–∞—Å –¥–ª—è —Ç—Ä–∞–Ω—Å–∫—Ä–∏–±–∞—Ü—ñ—ó –∞—É–¥—ñ–æ —Ñ–∞–π–ª—ñ–≤ –∑ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è–º Gemini API —Ç–∞ Google Sheets"""
    
    def __init__(self, api_key, model_name, google_credentials_file=None):
        self.api_key = api_key
        genai.configure(api_key=api_key)
        self.model = genai.GenerativeModel(model_name=model_name)
        logging.info("–Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–æ–≤–∞–Ω–æ Gemini API")
        
        # –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è Google Sheets —Ç–∞ Drive handlers
        self.google_credentials_file = google_credentials_file
        self.sheets_handler = None
        self.drive_handler = None
        
        if google_credentials_file and os.path.exists(google_credentials_file):
            try:
                self.sheets_handler = GoogleSheetsHandler(google_credentials_file)
                self.drive_handler = GoogleDriveHandler(google_credentials_file)
                logging.info("–Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–æ–≤–∞–Ω–æ Google Sheets —Ç–∞ Drive API")
            except Exception as e:
                logging.warning(f"–ù–µ –≤–¥–∞–ª–æ—Å—è —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑—É–≤–∞—Ç–∏ Google API: {e}")
        else:
            logging.info("Google credentials –Ω–µ –Ω–∞–¥–∞–Ω–æ, –ø—Ä–∞—Ü—é—î–º–æ –±–µ–∑ Google —ñ–Ω—Ç–µ–≥—Ä–∞—Ü—ñ—ó")
    
    def transcribe_audio(self, audio_path):
        """–¢—Ä–∞–Ω—Å–∫—Ä–∏–±–∞—Ü—ñ—è –∞—É–¥—ñ–æ —Ñ–∞–π–ª—É"""
        try:
            logging.info(f"–ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –∞—É–¥—ñ–æ —Ñ–∞–π–ª—É: {audio_path}")
            
            with open(audio_path, 'rb') as f:
                audio_bytes = f.read()
            
            import mimetypes
            mime_type = mimetypes.guess_type(audio_path)[0] or 'audio/mpeg'
            
            logging.info(f"–†–æ–∑–º—ñ—Ä —Ñ–∞–π–ª—É: {len(audio_bytes) / 1024 / 1024:.2f} MB, MIME: {mime_type}")
            
            prompt = """
            –ë—É–¥—å –ª–∞—Å–∫–∞, —Ç—Ä–∞–Ω—Å–∫—Ä–∏–±—É–π —Ü–µ–π –∞—É–¥—ñ–æ —Ñ–∞–π–ª —É–∫—Ä–∞—ó–Ω—Å—å–∫–æ—é –º–æ–≤–æ—é. 
            –Ø–∫—â–æ –≤ –∞—É–¥—ñ–æ –∑–≤—É—á–∏—Ç—å —ñ–Ω—à–∞ –º–æ–≤–∞, —Ç—Ä–∞–Ω—Å–∫—Ä–∏–±—É–π —ó—ó –æ—Ä–∏–≥—ñ–Ω–∞–ª—å–Ω–æ—é –º–æ–≤–æ—é.
            –ó–±–µ—Ä–µ–∂–∏ —Å—Ç—Ä—É–∫—Ç—É—Ä—É –º–æ–≤–ª–µ–Ω–Ω—è, —Ä–æ–∑–¥—ñ–ª–∏ –Ω–∞ –∞–±–∑–∞—Ü–∏ –¥–µ —Ü–µ –¥–æ—Ä–µ—á–Ω–æ.
            """
            
            audio_part = {
                "inline_data": {
                    "mime_type": mime_type,
                    "data": audio_bytes
                }
            }
            
            logging.info("–ü–æ—á–∞—Ç–æ–∫ –≥–µ–Ω–µ—Ä–∞—Ü—ñ—ó —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ç—É (inline mode)...")
            
            response = self.model.generate_content(
                [prompt, audio_part],
                request_options={"timeout": 600}
            )
            
            if response and response.text:
                logging.info(f"–£—Å–ø—ñ—à–Ω–æ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–±–æ–≤–∞–Ω–æ: {audio_path}")
                return response.text
            else:
                logging.error(f"–ù–µ –≤–¥–∞–ª–æ—Å—è –æ—Ç—Ä–∏–º–∞—Ç–∏ —Ç–µ–∫—Å—Ç –¥–ª—è —Ñ–∞–π–ª—É: {audio_path}")
                return None
                
        except Exception as e:
            logging.error(f"–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–±–∞—Ü—ñ—ó {audio_path}: {str(e)}")
            import traceback
            logging.error(f"Traceback: {traceback.format_exc()}")
            return None
    
    def save_transcript(self, text, output_path):
        """–ó–±–µ—Ä–µ–∂–µ–Ω–Ω—è —Ç—Ä–∞–Ω—Å–∫—Ä–∏–±–æ–≤–∞–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç—É"""
        try:
            os.makedirs(os.path.dirname(output_path), exist_ok=True)
            
            with open(output_path, 'w', encoding='utf-8') as f:
                f.write(f"# –¢—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ç\n")
                f.write(f"–î–∞—Ç–∞ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}\n\n")
                f.write("---\n\n")
                f.write(text)
            
            logging.info(f"–ó–±–µ—Ä–µ–∂–µ–Ω–æ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ç: {output_path}")
            
        except Exception as e:
            logging.error(f"–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—ñ —Ñ–∞–π–ª—É {output_path}: {str(e)}")
    
    def fill_sheets_data(self, transcript_text: str, spreadsheet_id: str, worksheet_name: str = None) -> Dict[str, Any]:
        """–ó–∞–ø–æ–≤–Ω—é—î –¥–∞–Ω—ñ –Ω–∞ –æ—Å–Ω–æ–≤—ñ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ç—É, —á–∏—Ç–∞—é—á–∏ —Å—Ç—Ä—É–∫—Ç—É—Ä—É –ø–æ–ª—ñ–≤ –∑ Google Sheets"""
        try:
            logging.info("üìä –ß–∏—Ç–∞–Ω–Ω—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∏ –ø–æ–ª—ñ–≤ –∑ Google Sheets...")
            fields_structure = self.sheets_handler.read_data(
                spreadsheet_id=spreadsheet_id,
                worksheet_name=worksheet_name,
                header_row=2,
                data_row=3
            )
            
            if not fields_structure:
                logging.error("–ù–µ –≤–¥–∞–ª–æ—Å—è –ø—Ä–æ—á–∏—Ç–∞—Ç–∏ —Å—Ç—Ä—É–∫—Ç—É—Ä—É –ø–æ–ª—ñ–≤ –∑ —Ç–∞–±–ª–∏—Ü—ñ")
                return {}
            
            logging.info(f"–ü–æ—á–∞—Ç–æ –∑–∞–ø–æ–≤–Ω–µ–Ω–Ω—è {len(fields_structure)} –ø–æ–ª—ñ–≤")
            logging.info(f"ü§ñ –ê–Ω–∞–ª—ñ–∑ –≤—Å—ñ—Ö –ø–æ–ª—ñ–≤ –æ–¥–Ω–∏–º –∑–∞–ø–∏—Ç–æ–º –¥–æ Gemini...")
            all_results = self._analyze_all_fields_at_once(transcript_text, fields_structure)
            
            filled_data = {}
            for field_name, value in all_results.items():
                filled_data[field_name] = value
            
            logging.info(f"‚úÖ –ó–∞–ø–æ–≤–Ω–µ–Ω–Ω—è –∑–∞–≤–µ—Ä—à–µ–Ω–æ: {len(filled_data)} –ø–æ–ª—ñ–≤")
            return filled_data
            
        except Exception as e:
            logging.error(f"–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –∑–∞–ø–æ–≤–Ω–µ–Ω–Ω—ñ –¥–∞–Ω–∏—Ö: {str(e)}")
            import traceback
            logging.error(traceback.format_exc())
            return {}
    
    def _analyze_all_fields_at_once(self, text: str, fields_structure: Dict[str, Dict[str, Any]]) -> Dict[str, str]:
        """–ê–Ω–∞–ª—ñ–∑—É—î —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ç –¥–ª—è –≤—Å—ñ—Ö –ø–æ–ª—ñ–≤ –æ–¥–Ω–∏–º –∑–∞–ø–∏—Ç–æ–º"""
        try:
            prompt_parts = [
                "–ü—Ä–æ–∞–Ω–∞–ª—ñ–∑—É–π –Ω–∞—Å—Ç—É–ø–Ω–∏–π —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ç —Ç–µ–ª–µ—Ñ–æ–Ω–Ω–æ—ó —Ä–æ–∑–º–æ–≤–∏ —Ç–∞ –∑–∞–ø–æ–≤–Ω–∏ –≤—Å—ñ –ø–æ–ª—è.",
                f"\nüìû –¢–†–ê–ù–°–ö–†–ò–ü–¢:\n{text}\n",
                "\nüìã –ü–û–õ–Ø –î–õ–Ø –ó–ê–ü–û–í–ù–ï–ù–ù–Ø:"
            ]
            
            field_mappings = {}
            for i, (field_name, field_info) in enumerate(fields_structure.items(), 1):
                field_type = field_info.get('type', 'text')
                dropdown_options = field_info.get('dropdown_options', [])
                
                if field_type == 'dropdown' and dropdown_options:
                    options_str = ", ".join(str(opt) for opt in dropdown_options)
                    prompt_parts.append(f"{i}. {field_name} (–≤–∏–±—ñ—Ä –∑: {options_str})")
                else:
                    prompt_parts.append(f"{i}. {field_name} (—Ç–µ–∫—Å—Ç)")
                
                field_mappings[i] = field_name
            
            prompt_parts.extend([
                "\n‚ö†Ô∏è –í–ê–ñ–õ–ò–í–û:",
                "- –î–ª—è dropdown –ø–æ–ª—ñ–≤ –æ–±–µ—Ä–∏ –¢–Ü–õ–¨–ö–ò –æ–¥–Ω–µ –∑–Ω–∞—á–µ–Ω–Ω—è –∑—ñ —Å–ø–∏—Å–∫—É –¢–û–ß–ù–û –Ø–ö –í–û–ù–û –ù–ê–ü–ò–°–ê–ù–û",
                "- –î–ª—è —á–∏—Å–ª–æ–≤–∏—Ö –ø–æ–ª—ñ–≤ (0/1) –ø–∏—à–∏ —Ç—ñ–ª—å–∫–∏ —Ü–∏—Ñ—Ä—É –ë–ï–ó –ø—Ä–æ–±—ñ–ª—ñ–≤: '0' –∞–±–æ '1'",
                "- –î–ª—è —Ç–µ–∫—Å—Ç–æ–≤–∏—Ö –ø–æ–ª—ñ–≤ –¥–∞–π –∫–æ—Ä–æ—Ç–∫—É –≤—ñ–¥–ø–æ–≤—ñ–¥—å (1-2 —Ä–µ—á–µ–Ω–Ω—è)",
                "- –Ø–∫—â–æ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—ó –Ω–µ–º–∞—î, –¥–ª—è dropdown –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–π –ø–µ—Ä—à–µ –∑–Ω–∞—á–µ–Ω–Ω—è –∑—ñ —Å–ø–∏—Å–∫—É, –¥–ª—è —Ç–µ–∫—Å—Ç—É –Ω–∞–ø–∏—à–∏ '–ù–µ –≤–∫–∞–∑–∞–Ω–æ'",
                "- –í—ñ–¥–ø–æ–≤—ñ–¥—å —É —Ñ–æ—Ä–º–∞—Ç—ñ: '1:–∑–Ω–∞—á–µ–Ω–Ω—è,2:–∑–Ω–∞—á–µ–Ω–Ω—è,3:–∑–Ω–∞—á–µ–Ω–Ω—è' (–ë–ï–ó –ø—Ä–æ–±—ñ–ª—ñ–≤ –ø—ñ—Å–ª—è –Ω–æ–º–µ—Ä–∞ —Ç–∞ –¥–≤–æ–∫—Ä–∞–ø–∫–∏)",
                "- –ù–ï –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π –∫–≤–∞–¥—Ä–∞—Ç–Ω—ñ –¥—É–∂–∫–∏ [], –ª–∞–ø–∫–∏ –∞–±–æ –∑–∞–π–≤—ñ –ø—Ä–æ–±—ñ–ª–∏",
                "- –ü—Ä–∏–∫–ª–∞–¥ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—ó –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ: '1:–ó–∞–ø–∏—Å –Ω–∞ –¢–û,2:0,3:1,4:–ë–æ–≥–¥–∞–Ω'",
                "\nüìù –í–Ü–î–ü–û–í–Ü–î–¨:"
            ])
            
            full_prompt = "\n".join(prompt_parts)
            response = self.model.generate_content(full_prompt)
            result_text = response.text.strip()
            
            logging.info(f"–û—Ç—Ä–∏–º–∞–Ω–æ –≤—ñ–¥–ø–æ–≤—ñ–¥—å –≤—ñ–¥ Gemini –¥–ª—è {len(fields_structure)} –ø–æ–ª—ñ–≤")
            
            results = {}
            parts = result_text.split(',')
            
            for part in parts:
                part = part.strip()
                if ':' in part:
                    try:
                        field_num_str, value = part.split(':', 1)
                        field_num = int(field_num_str.strip())
                        # –û—á–∏—â–∞—î–º–æ –∑–Ω–∞—á–µ–Ω–Ω—è –≤—ñ–¥ –∫–≤–∞–¥—Ä–∞—Ç–Ω–∏—Ö –¥—É–∂–æ–∫, –ª–∞–ø–æ–∫ —Ç–∞ –ø—Ä–æ–±—ñ–ª—ñ–≤
                        value = value.strip().strip('[]').strip().strip('"').strip("'").strip()
                        
                        if field_num in field_mappings:
                            field_name = field_mappings[field_num]
                            field_info = fields_structure[field_name]
                            
                            if field_info.get('type') == 'dropdown':
                                dropdown_options = [str(opt).strip() for opt in field_info.get('dropdown_options', [])]
                                # –ü–æ—Ä—ñ–≤–Ω—é—î–º–æ –æ—á–∏—â–µ–Ω—ñ –∑–Ω–∞—á–µ–Ω–Ω—è
                                value_clean = value.strip()
                                
                                if value_clean in dropdown_options:
                                    results[field_name] = value_clean
                                else:
                                    # –ü—Ä–æ–±—É—î–º–æ –∑–Ω–∞–π—Ç–∏ —Å—Ö–æ–∂–µ –∑–Ω–∞—á–µ–Ω–Ω—è (–±–µ–∑ —É—Ä–∞—Ö—É–≤–∞–Ω–Ω—è —Ä–µ–≥—ñ—Å—Ç—Ä—É)
                                    found = False
                                    for opt in dropdown_options:
                                        if opt.strip().lower() == value_clean.lower():
                                            results[field_name] = opt.strip()
                                            found = True
                                            break
                                    
                                    if not found:
                                        fallback = dropdown_options[0] if dropdown_options else value_clean
                                        results[field_name] = fallback
                                        logging.warning(f"'{field_name}': –∑–Ω–∞—á–µ–Ω–Ω—è '{value_clean}' –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ –≤ {dropdown_options}, –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–æ '{fallback}'")
                                    else:
                                        logging.info(f"‚úì {field_name}: {results[field_name]}")
                            else:
                                results[field_name] = value
                            
                            if field_name not in results or not results.get(field_name):
                                logging.info(f"‚úì {field_name}: {value}")
                            
                    except ValueError:
                        continue
            
            for field_name, field_info in fields_structure.items():
                if field_name not in results:
                    if field_info.get('type') == 'dropdown':
                        dropdown_options = field_info.get('dropdown_options', [])
                        results[field_name] = str(dropdown_options[0]) if dropdown_options else "–ù–µ –≤–∫–∞–∑–∞–Ω–æ"
                    else:
                        results[field_name] = "–ù–µ –≤–∫–∞–∑–∞–Ω–æ"
                    logging.warning(f"‚ö†Ô∏è {field_name}: –Ω–µ –∑–∞–ø–æ–≤–Ω–µ–Ω–æ, –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–æ –∑–Ω–∞—á–µ–Ω–Ω—è –∑–∞ –∑–∞–º–æ–≤—á—É–≤–∞–Ω–Ω—è–º")
            
            return results
            
        except Exception as e:
            logging.error(f"–ü–æ–º–∏–ª–∫–∞ –∞–Ω–∞–ª—ñ–∑—É –ø–æ–ª—ñ–≤: {e}")
            import traceback
            logging.error(traceback.format_exc())
            return {}
    
    def process_and_update_sheets(self, audio_path: str = None, audio_file_id: str = None, 
                                 drive_folder_id: str = None, spreadsheet_id: str = None, 
                                 worksheet_name: str = None, local_transcripts_folder: str = None) -> Dict[str, Any]:
        """
        –ü–æ–≤–Ω–∏–π –ø—Ä–æ—Ü–µ—Å: —Ç—Ä–∞–Ω—Å–∫—Ä–∏–±–∞—Ü—ñ—è + –∞–Ω–∞–ª—ñ–∑ + –∑–∞–ø–∏—Å —É Google Sheets
        
        Args:
            audio_path: –õ–æ–∫–∞–ª—å–Ω–∏–π —à–ª—è—Ö –¥–æ –∞—É–¥—ñ–æ —Ñ–∞–π–ª—É (—è–∫—â–æ —î)
            audio_file_id: ID —Ñ–∞–π–ª—É –Ω–∞ Google Drive (–∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–∞ audio_path)
            drive_folder_id: ID –ø–∞–ø–∫–∏ Drive (–ø–æ—Ç—Ä—ñ–±–µ–Ω —è–∫—â–æ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î—Ç—å—Å—è audio_file_id)
            spreadsheet_id: ID Google Sheets –¥–æ–∫—É–º–µ–Ω—Ç—É
            worksheet_name: –ù–∞–∑–≤–∞ –∞—Ä–∫—É—à—É
            local_transcripts_folder: –ü–∞–ø–∫–∞ –¥–ª—è –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ç—ñ–≤
        """
        try:
            # –í–∏–∑–Ω–∞—á–∞—î–º–æ –¥–∂–µ—Ä–µ–ª–æ –∞—É–¥—ñ–æ
            temp_file = None
            if audio_file_id:
                # –ó–∞–≤–∞–Ω—Ç–∞–∂—É—î–º–æ —Ñ–∞–π–ª –∑ Google Drive
                logging.info(f"–ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –∞—É–¥—ñ–æ —Ñ–∞–π–ª—É –∑ Google Drive (ID: {audio_file_id})")
                
                if not self.drive_handler:
                    return {'status': 'error', 'success': False, 'error': 'Drive handler –Ω–µ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–æ–≤–∞–Ω–æ'}
                
                # –û—Ç—Ä–∏–º—É—î–º–æ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –ø—Ä–æ —Ñ–∞–π–ª
                file_metadata = self.drive_handler.service.files().get(
                    fileId=audio_file_id, 
                    fields='name, mimeType'
                ).execute()
                
                file_name = file_metadata.get('name', 'audio.mp3')
                
                # –ó–∞–≤–∞–Ω—Ç–∞–∂—É—î–º–æ —Ñ–∞–π–ª —É —Ç–∏–º—á–∞—Å–æ–≤—É –¥–∏—Ä–µ–∫—Ç–æ—Ä—ñ—é
                import tempfile
                temp_dir = tempfile.gettempdir()
                temp_file = os.path.join(temp_dir, file_name)
                
                request = self.drive_handler.service.files().get_media(fileId=audio_file_id)
                with open(temp_file, 'wb') as f:
                    from googleapiclient.http import MediaIoBaseDownload
                    import io
                    fh = io.BytesIO()
                    downloader = MediaIoBaseDownload(fh, request)
                    done = False
                    while not done:
                        status, done = downloader.next_chunk()
                    fh.seek(0)
                    f.write(fh.read())
                
                audio_path = temp_file
                logging.info(f"–§–∞–π–ª –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–æ –ª–æ–∫–∞–ª—å–Ω–æ: {audio_path}")
            
            elif not audio_path:
                return {'status': 'error', 'success': False, 'error': '–ü–æ—Ç—Ä—ñ–±–Ω–æ –≤–∫–∞–∑–∞—Ç–∏ audio_path –∞–±–æ audio_file_id'}
            
            # –¢—Ä–∞–Ω—Å–∫—Ä–∏–±–∞—Ü—ñ—è
            logging.info(f"–¢—Ä–∞–Ω—Å–∫—Ä–∏–±–∞—Ü—ñ—è –∞—É–¥—ñ–æ —Ñ–∞–π–ª—É: {audio_path}")
            transcript_text = self.transcribe_audio(audio_path)
            
            # –í–∏–¥–∞–ª—è—î–º–æ —Ç–∏–º—á–∞—Å–æ–≤–∏–π —Ñ–∞–π–ª —è–∫—â–æ –±—É–≤ —Å—Ç–≤–æ—Ä–µ–Ω–∏–π
            if temp_file and os.path.exists(temp_file):
                try:
                    os.remove(temp_file)
                    logging.info(f"–í–∏–¥–∞–ª–µ–Ω–æ —Ç–∏–º—á–∞—Å–æ–≤–∏–π —Ñ–∞–π–ª: {temp_file}")
                except Exception as e:
                    logging.warning(f"–ù–µ –≤–¥–∞–ª–æ—Å—è –≤–∏–¥–∞–ª–∏—Ç–∏ —Ç–∏–º—á–∞—Å–æ–≤–∏–π —Ñ–∞–π–ª: {e}")
            
            if not transcript_text:
                return {'status': 'error', 'success': False, 'error': '–ü–æ–º–∏–ª–∫–∞ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–±–∞—Ü—ñ—ó'}
            
            logging.info("–ê–Ω–∞–ª—ñ–∑ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ç—É —Ç–∞ –∑–∞–ø–æ–≤–Ω–µ–Ω–Ω—è –ø–æ–ª—ñ–≤...")
            filled_data = self.fill_sheets_data(
                transcript_text=transcript_text,
                spreadsheet_id=spreadsheet_id,
                worksheet_name=worksheet_name
            )
            
            if not filled_data:
                return {
                    'status': 'error',
                    'success': False,
                    'error': '–ü–æ–º–∏–ª–∫–∞ –∑–∞–ø–æ–≤–Ω–µ–Ω–Ω—è –¥–∞–Ω–∏—Ö',
                    'transcript': transcript_text
                }
            
            logging.info(f"–ó–∞–ø–∏—Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ñ–≤ —É Google Sheets")
            filename = os.path.basename(audio_path) if audio_path else file_name
            
            write_result = self.sheets_handler.write_data_to_row(
                spreadsheet_id=spreadsheet_id,
                worksheet_name=worksheet_name,
                data=filled_data,
                filename=filename,
                transcript=transcript_text
            )
            
            if write_result:
                logging.info(f"‚úÖ –£—Å–ø—ñ—à–Ω–æ –∑–∞–ø–∏—Å–∞–Ω–æ –¥–∞–Ω—ñ —É Google Sheets")
                return {
                    'status': 'success',
                    'success': True,
                    'transcript': transcript_text,
                    'filled_data': filled_data
                }
            else:
                error_msg = '–ü–æ–º–∏–ª–∫–∞ –∑–∞–ø–∏—Å—É —É Sheets'
                logging.error(f"‚ùå {error_msg}")
                return {
                    'status': 'error',
                    'success': False,
                    'error': error_msg,
                    'transcript': transcript_text,
                    'filled_data': filled_data
                }
                
        except Exception as e:
            error_msg = f"–ö—Ä–∏—Ç–∏—á–Ω–∞ –ø–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ–±—Ä–æ–±—Ü—ñ: {str(e)}"
            logging.error(error_msg)
            import traceback
            logging.error(traceback.format_exc())
            
            # –í–∏–¥–∞–ª—è—î–º–æ —Ç–∏–º—á–∞—Å–æ–≤–∏–π —Ñ–∞–π–ª –ø—Ä–∏ –ø–æ–º–∏–ª—Ü—ñ
            if temp_file and os.path.exists(temp_file):
                try:
                    os.remove(temp_file)
                except:
                    pass
            
            return {'status': 'error', 'success': False, 'error': error_msg}


if __name__ == "__main__":
    transcriber = AudioTranscriber(model_name="gemini-2.5-flash", api_key="AIzaSyDi-2Xk5BJmK15KuMyWH0djqd5ni0inIyM")
    audio_file = 'google_folder/2025-09-03_10-41_0963363703_incoming.mp3'
    result = transcriber.transcribe_audio(audio_file)
    with open("transcript.txt", "w", encoding="utf-8") as f:
        f.write(result)
