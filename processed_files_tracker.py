"""
Processed Files Tracker Module

–ú–æ–¥—É–ª—å –¥–ª—è –≤—ñ–¥—Å—Ç–µ–∂–µ–Ω–Ω—è –æ–ø—Ä–∞—Ü—å–æ–≤–∞–Ω–∏—Ö —Ñ–∞–π–ª—ñ–≤, —â–æ–± —É–Ω–∏–∫–Ω—É—Ç–∏ –ø–æ–≤—Ç–æ—Ä–Ω–æ—ó –æ–±—Ä–æ–±–∫–∏.
"""

import json
import os
import logging
from datetime import datetime
from typing import Dict, Optional


class ProcessedFilesTracker:
    """–ö–ª–∞—Å –¥–ª—è –≤—ñ–¥—Å—Ç–µ–∂–µ–Ω–Ω—è –æ–ø—Ä–∞—Ü—å–æ–≤–∞–Ω–∏—Ö —Ñ–∞–π–ª—ñ–≤"""
    
    def __init__(self, tracker_file: str = "processed_files.json"):
        """
        –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è —Ç—Ä–µ–∫–µ—Ä–∞
        
        Args:
            tracker_file (str): –®–ª—è—Ö –¥–æ —Ñ–∞–π–ª—É –∑ —ñ—Å—Ç–æ—Ä—ñ—î—é
        """
        self.tracker_file = tracker_file
        self.processed_files: Dict[str, Dict] = {}
        self.load_history()
    
    def load_history(self):
        """–ó–∞–≤–∞–Ω—Ç–∞–∂—É—î —ñ—Å—Ç–æ—Ä—ñ—é –∑ —Ñ–∞–π–ª—É"""
        if os.path.exists(self.tracker_file):
            try:
                with open(self.tracker_file, 'r', encoding='utf-8') as f:
                    self.processed_files = json.load(f)
                logging.info(f"–ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–æ —ñ—Å—Ç–æ—Ä—ñ—é: {len(self.processed_files)} —Ñ–∞–π–ª—ñ–≤")
            except Exception as e:
                logging.error(f"–ü–æ–º–∏–ª–∫–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è —ñ—Å—Ç–æ—Ä—ñ—ó: {e}")
                self.processed_files = {}
        else:
            logging.info("–§–∞–π–ª —ñ—Å—Ç–æ—Ä—ñ—ó –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ, —Å—Ç–≤–æ—Ä—é—î—Ç—å—Å—è –Ω–æ–≤–∏–π")
            self.processed_files = {}
    
    def save_history(self):
        """–ó–±–µ—Ä—ñ–≥–∞—î —ñ—Å—Ç–æ—Ä—ñ—é —É —Ñ–∞–π–ª"""
        try:
            with open(self.tracker_file, 'w', encoding='utf-8') as f:
                json.dump(self.processed_files, f, indent=2, ensure_ascii=False)
            logging.debug(f"–Ü—Å—Ç–æ—Ä—ñ—è –∑–±–µ—Ä–µ–∂–µ–Ω–∞: {len(self.processed_files)} —Ñ–∞–π–ª—ñ–≤")
        except Exception as e:
            logging.error(f"–ü–æ–º–∏–ª–∫–∞ –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è —ñ—Å—Ç–æ—Ä—ñ—ó: {e}")
    
    def is_processed(self, file_id: str) -> bool:
        """
        –ü–µ—Ä–µ–≤—ñ—Ä—è—î —á–∏ —Ñ–∞–π–ª –≤–∂–µ –æ–±—Ä–æ–±–ª–µ–Ω–æ
        
        Args:
            file_id (str): ID —Ñ–∞–π–ª—É (–¥–ª—è Drive) –∞–±–æ —à–ª—è—Ö (–¥–ª—è –ª–æ–∫–∞–ª—å–Ω–∏—Ö —Ñ–∞–π–ª—ñ–≤)
            
        Returns:
            bool: True —è–∫—â–æ —Ñ–∞–π–ª –≤–∂–µ –æ–±—Ä–æ–±–ª–µ–Ω–æ
        """
        return file_id in self.processed_files
    
    def mark_as_processed(self, file_id: str, file_name: str, 
                         success: bool = True, error: Optional[str] = None,
                         row_number: Optional[int] = None):
        """
        –ü–æ–∑–Ω–∞—á–∞—î —Ñ–∞–π–ª —è–∫ –æ–±—Ä–æ–±–ª–µ–Ω–∏–π
        
        Args:
            file_id (str): ID —Ñ–∞–π–ª—É –∞–±–æ —à–ª—è—Ö
            file_name (str): –ù–∞–∑–≤–∞ —Ñ–∞–π–ª—É
            success (bool): –ß–∏ —É—Å–ø—ñ—à–Ω–æ –æ–±—Ä–æ–±–ª–µ–Ω–æ
            error (Optional[str]): –ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –ø—Ä–æ –ø–æ–º–∏–ª–∫—É
            row_number (Optional[int]): –ù–æ–º–µ—Ä —Ä—è–¥–∫–∞ –≤ —Ç–∞–±–ª–∏—Ü—ñ
        """
        self.processed_files[file_id] = {
            'file_name': file_name,
            'processed_at': datetime.now().isoformat(),
            'success': success,
            'error': error,
            'row_number': row_number
        }
        self.save_history()
        
        status = "‚úÖ" if success else "‚ùå"
        logging.info(f"{status} –§–∞–π–ª –ø–æ–∑–Ω–∞—á–µ–Ω–æ —è–∫ –æ–±—Ä–æ–±–ª–µ–Ω–∏–π: {file_name}")
    
    def get_processed_count(self) -> int:
        """–ü–æ–≤–µ—Ä—Ç–∞—î –∫—ñ–ª—å–∫—ñ—Å—Ç—å –æ–ø—Ä–∞—Ü—å–æ–≤–∞–Ω–∏—Ö —Ñ–∞–π–ª—ñ–≤"""
        return len(self.processed_files)
    
    def get_successful_count(self) -> int:
        """–ü–æ–≤–µ—Ä—Ç–∞—î –∫—ñ–ª—å–∫—ñ—Å—Ç—å —É—Å–ø—ñ—à–Ω–æ –æ–ø—Ä–∞—Ü—å–æ–≤–∞–Ω–∏—Ö —Ñ–∞–π–ª—ñ–≤"""
        return sum(1 for f in self.processed_files.values() if f.get('success', False))
    
    def get_failed_count(self) -> int:
        """–ü–æ–≤–µ—Ä—Ç–∞—î –∫—ñ–ª—å–∫—ñ—Å—Ç—å –Ω–µ–≤–¥–∞–ª–æ –æ–ø—Ä–∞—Ü—å–æ–≤–∞–Ω–∏—Ö —Ñ–∞–π–ª—ñ–≤"""
        return sum(1 for f in self.processed_files.values() if not f.get('success', True))
    
    def get_file_info(self, file_id: str) -> Optional[Dict]:
        """
        –û—Ç—Ä–∏–º—É—î —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –ø—Ä–æ –æ–±—Ä–æ–±–ª–µ–Ω–∏–π —Ñ–∞–π–ª
        
        Args:
            file_id (str): ID —Ñ–∞–π–ª—É
            
        Returns:
            Optional[Dict]: –Ü–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è –ø—Ä–æ —Ñ–∞–π–ª –∞–±–æ None
        """
        return self.processed_files.get(file_id)
    
    def clear_history(self):
        """–û—á–∏—â—É—î –≤—Å—é —ñ—Å—Ç–æ—Ä—ñ—é"""
        self.processed_files = {}
        self.save_history()
        logging.info("–Ü—Å—Ç–æ—Ä—ñ—é –æ—á–∏—â–µ–Ω–æ")
    
    def remove_file(self, file_id: str):
        """
        –í–∏–¥–∞–ª—è—î —Ñ–∞–π–ª –∑ —ñ—Å—Ç–æ—Ä—ñ—ó (–¥–ª—è –ø–æ–≤—Ç–æ—Ä–Ω–æ—ó –æ–±—Ä–æ–±–∫–∏)
        
        Args:
            file_id (str): ID —Ñ–∞–π–ª—É
        """
        if file_id in self.processed_files:
            file_name = self.processed_files[file_id].get('file_name', file_id)
            del self.processed_files[file_id]
            self.save_history()
            logging.info(f"–§–∞–π–ª –≤–∏–¥–∞–ª–µ–Ω–æ –∑ —ñ—Å—Ç–æ—Ä—ñ—ó: {file_name}")
    
    def get_stats(self) -> Dict[str, int]:
        """–ü–æ–≤–µ—Ä—Ç–∞—î —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –æ–±—Ä–æ–±–∫–∏"""
        return {
            'total': self.get_processed_count(),
            'successful': self.get_successful_count(),
            'failed': self.get_failed_count()
        }
    
    def print_stats(self):
        """–í–∏–≤–æ–¥–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –≤ –ª–æ–≥"""
        stats = self.get_stats()
        logging.info("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –æ–±—Ä–æ–±–∫–∏ —Ñ–∞–π–ª—ñ–≤:")
        logging.info(f"   –í—Å—å–æ–≥–æ –æ–±—Ä–æ–±–ª–µ–Ω–æ: {stats['total']}")
        logging.info(f"   ‚úÖ –£—Å–ø—ñ—à–Ω–æ: {stats['successful']}")
        logging.info(f"   ‚ùå –ó –ø–æ–º–∏–ª–∫–∞–º–∏: {stats['failed']}")
