import os
import time
import logging
import glob
from dotenv import load_dotenv
from watchdog.observers import Observer

from transcriber import AudioTranscriber
from file_handler import AudioFileHandler
from utils import process_existing_files
from excel_reader import ExcelDataReader

# –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –ª–æ–≥—É–≤–∞–Ω–Ω—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(levelname)s - %(message)s',
    handlers=[
        logging.FileHandler('transcriber.log', encoding='utf-8'),
        logging.StreamHandler()
    ]
)

def load_config():
    """
    –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—ó –∑ .env —Ñ–∞–π–ª—É
    
    Returns:
        dict: –°–ª–æ–≤–Ω–∏–∫ –∑ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è–º–∏
    """
    load_dotenv()
    
    config = {
        'api_key': os.getenv('GEMINI_API_KEY'),
        'model': os.getenv('GEMINI_MODEL'),
        'folder': os.getenv('AUDIO_FOLDER'),  # –¢–µ–ø–µ—Ä —Ü–µ —î–¥–∏–Ω–∞ –ø–∞–ø–∫–∞ –¥–ª—è –∞—É–¥—ñ–æ —Ç–∞ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ç—ñ–≤
        'supported_formats': os.getenv('SUPPORTED_FORMATS', '.mp3,.wav,.m4a,.aac,.ogg').split(','),
        'max_file_size': int(os.getenv('MAX_FILE_SIZE_MB', 20)),
        'excel_file': os.getenv('EXCEL_TEMPLATE_PATH', 'google_folder/–ó–≤—ñ—Ç –ø—Ä–æ—Å–ª—É—Ö–∞–Ω–∏—Ö —Ä–æ–∑–º–æ–≤.xlsx'),
        'enable_excel_processing': os.getenv('ENABLE_EXCEL_PROCESSING', 'true').lower() == 'true',
        'excel_output_dir': os.getenv('EXCEL_OUTPUT_DIR', 'excel_output'),
        'batch_processing': os.getenv('ENABLE_BATCH_PROCESSING', 'false').lower() == 'true'
    }
    
    # –í–∞–ª—ñ–¥–∞—Ü—ñ—è –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—ó
    if not config['api_key']:
        raise ValueError("GEMINI_API_KEY –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ –≤ .env —Ñ–∞–π–ª—ñ")
    
    if not config['folder']:
        raise ValueError("AUDIO_FOLDER –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ –≤ .env —Ñ–∞–π–ª—ñ")
    
    return config

def check_excel_template(excel_path):
    """
    –ü–µ—Ä–µ–≤—ñ—Ä—è—î –¥–æ—Å—Ç—É–ø–Ω—ñ—Å—Ç—å Excel —à–∞–±–ª–æ–Ω—É
    
    Args:
        excel_path (str): –®–ª—è—Ö –¥–æ Excel —Ñ–∞–π–ª—É
        
    Returns:
        bool: True —è–∫—â–æ —Ñ–∞–π–ª –¥–æ—Å—Ç—É–ø–Ω–∏–π —Ç–∞ –∫–æ—Ä–µ–∫—Ç–Ω–∏–π
    """
    if not os.path.exists(excel_path):
        logging.warning(f"Excel —à–∞–±–ª–æ–Ω –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ: {excel_path}")
        return False
    
    try:
        with ExcelDataReader(excel_path, verbose=False) as reader:
            data = reader.read_data()
            if data:
                logging.info(f"Excel —à–∞–±–ª–æ–Ω –≥–æ—Ç–æ–≤–∏–π: {len(data)} –ø–æ–ª—ñ–≤ –∑–Ω–∞–π–¥–µ–Ω–æ")
                return True
            else:
                logging.warning("Excel —à–∞–±–ª–æ–Ω –ø–æ—Ä–æ–∂–Ω—ñ–π –∞–±–æ –º–∞—î –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—É —Å—Ç—Ä—É–∫—Ç—É—Ä—É")
                return False
    except Exception as e:
        logging.error(f"–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ–≤—ñ—Ä—Ü—ñ Excel —à–∞–±–ª–æ–Ω—É: {e}")
        return False

def process_single_audio_with_excel(transcriber, audio_path, excel_path, output_dir):
    """
    –û–±—Ä–æ–±–ª—è—î –æ–¥–∏–Ω –∞—É–¥—ñ–æ —Ñ–∞–π–ª –∑ Excel —ñ–Ω—Ç–µ–≥—Ä–∞—Ü—ñ—î—é
    
    Args:
        transcriber: –ï–∫–∑–µ–º–ø–ª—è—Ä AudioTranscriber
        audio_path (str): –®–ª—è—Ö –¥–æ –∞—É–¥—ñ–æ —Ñ–∞–π–ª—É
        excel_path (str): –®–ª—è—Ö –¥–æ Excel —à–∞–±–ª–æ–Ω—É
        output_dir (str): –î–∏—Ä–µ–∫—Ç–æ—Ä—ñ—è –¥–ª—è –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ñ–≤
        
    Returns:
        dict: –†–µ–∑—É–ª—å—Ç–∞—Ç –æ–±—Ä–æ–±–∫–∏
    """
    try:
        logging.info(f"–ü–æ—á–∞—Ç–æ–∫ –æ–±—Ä–æ–±–∫–∏ –∑ Excel: {os.path.basename(audio_path)}")
        
        result = transcriber.process_and_update_excel(
            audio_path=audio_path,
            excel_file_path=excel_path,
            target_row=None,  # –ó–Ω–∞—Ö–æ–¥–∏—Ç—å –Ω–∞—Å—Ç—É–ø–Ω–∏–π –ø–æ—Ä–æ–∂–Ω—ñ–π —Ä—è–¥–æ–∫
            output_excel_path=None,  # –ó–∞–ø–∏—Å—É—î –≤ –æ—Ä–∏–≥—ñ–Ω–∞–ª—å–Ω–∏–π —Ñ–∞–π–ª
            output_dir=output_dir
        )
        
        if result['success']:
            logging.info(f"‚úÖ –§–∞–π–ª —É—Å–ø—ñ—à–Ω–æ –æ–±—Ä–æ–±–ª–µ–Ω–æ: {os.path.basename(audio_path)}")
            logging.info(f"   üìã Excel: {result.get('updated_excel_file', 'N/A')}")
            logging.info(f"   üìç –†—è–¥–æ–∫: {result.get('written_row', 'N/A')}")
        else:
            logging.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –æ–±—Ä–æ–±–∫–∏ {os.path.basename(audio_path)}: {result.get('error', '–ù–µ–≤—ñ–¥–æ–º–∞ –ø–æ–º–∏–ª–∫–∞')}")
        
        return result
        
    except Exception as e:
        logging.error(f"–ö—Ä–∏—Ç–∏—á–Ω–∞ –ø–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ–±—Ä–æ–±—Ü—ñ {audio_path}: {e}")
        return {'success': False, 'error': str(e)}

def run_batch_processing(transcriber, folder, excel_path, supported_formats, output_dir):
    """
    –ó–∞–ø—É—Å–∫–∞—î –ø–∞–∫–µ—Ç–Ω—É –æ–±—Ä–æ–±–∫—É –≤—Å—ñ—Ö –∞—É–¥—ñ–æ —Ñ–∞–π–ª—ñ–≤ —É –ø–∞–ø—Ü—ñ
    
    Args:
        transcriber: –ï–∫–∑–µ–º–ø–ª—è—Ä AudioTranscriber
        folder (str): –ü–∞–ø–∫–∞ –∑ –∞—É–¥—ñ–æ —Ñ–∞–π–ª–∞–º–∏
        excel_path (str): –®–ª—è—Ö –¥–æ Excel —à–∞–±–ª–æ–Ω—É
        supported_formats (list): –ü—ñ–¥—Ç—Ä–∏–º—É–≤–∞–Ω—ñ —Ñ–æ—Ä–º–∞—Ç–∏
        output_dir (str): –î–∏—Ä–µ–∫—Ç–æ—Ä—ñ—è –¥–ª—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ñ–≤
    """
    logging.info("üöÄ –ü–æ—á–∞—Ç–æ–∫ –ø–∞–∫–µ—Ç–Ω–æ—ó –æ–±—Ä–æ–±–∫–∏ –∑ Excel —ñ–Ω—Ç–µ–≥—Ä–∞—Ü—ñ—î—é")
    
    # –ó–Ω–∞—Ö–æ–¥–∏–º–æ –≤—Å—ñ –∞—É–¥—ñ–æ —Ñ–∞–π–ª–∏
    audio_files = []
    for format_ext in supported_formats:
        pattern = os.path.join(folder, f"**/*{format_ext}")
        audio_files.extend(glob.glob(pattern, recursive=True))
    
    if not audio_files:
        logging.warning("–ê—É–¥—ñ–æ —Ñ–∞–π–ª–∏ –¥–ª—è –ø–∞–∫–µ—Ç–Ω–æ—ó –æ–±—Ä–æ–±–∫–∏ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ")
        return
    
    # –§—ñ–ª—å—Ç—Ä—É—î–º–æ —Ñ–∞–π–ª–∏, —è–∫—ñ –≤–∂–µ –º–∞—é—Ç—å —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ç–∏
    files_to_process = []
    for audio_file in audio_files:
        transcript_path = os.path.splitext(audio_file)[0] + '.txt'
        if not os.path.exists(transcript_path):
            files_to_process.append(audio_file)
    
    if not files_to_process:
        logging.info("–í—Å—ñ –∑–Ω–∞–π–¥–µ–Ω—ñ –∞—É–¥—ñ–æ —Ñ–∞–π–ª–∏ –≤–∂–µ –º–∞—é—Ç—å —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ç–∏")
        return
    
    logging.info(f"–ó–Ω–∞–π–¥–µ–Ω–æ {len(files_to_process)} —Ñ–∞–π–ª—ñ–≤ –¥–ª—è –æ–±—Ä–æ–±–∫–∏")
    
    # –ó–∞–ø—É—Å–∫–∞—î–º–æ –ø–∞–∫–µ—Ç–Ω—É –æ–±—Ä–æ–±–∫—É
    batch_result = transcriber.batch_process_audio_files(
        audio_files=files_to_process[:5],  # –û–±–º–µ–∂—É—î–º–æ –¥–æ 5 —Ñ–∞–π–ª—ñ–≤ –∑–∞ —Ä–∞–∑
        excel_file_path=excel_path,
        output_dir=output_dir
    )
    
    # –í–∏–≤–æ–¥–∏–º–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∏
    logging.info("üìä –†–µ–∑—É–ª—å—Ç–∞—Ç–∏ –ø–∞–∫–µ—Ç–Ω–æ—ó –æ–±—Ä–æ–±–∫–∏:")
    logging.info(f"   üìÅ –í—Å—å–æ–≥–æ —Ñ–∞–π–ª—ñ–≤: {batch_result['total_files']}")
    logging.info(f"   ‚úÖ –£—Å–ø—ñ—à–Ω–æ: {batch_result['successful']}")
    logging.info(f"   ‚ùå –ó –ø–æ–º–∏–ª–∫–∞–º–∏: {batch_result['failed']}")
    
    if batch_result.get('updated_excel_file'):
        logging.info(f"   üìã –†–µ–∑—É–ª—å—Ç—É—é—á–∏–π Excel: {batch_result['updated_excel_file']}")

def main():
    """–ì–æ–ª–æ–≤–Ω–∞ —Ñ—É–Ω–∫—Ü—ñ—è –ø—Ä–æ–≥—Ä–∞–º–∏"""
    try:
        # –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—ó
        config = load_config()
        logging.info("–ö–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—é –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–æ —É—Å–ø—ñ—à–Ω–æ")
        
        # –°—Ç–≤–æ—Ä–µ–Ω–Ω—è –¥–∏—Ä–µ–∫—Ç–æ—Ä—ñ—ó —è–∫—â–æ –Ω–µ —ñ—Å–Ω—É—î
        os.makedirs(config['folder'], exist_ok=True)
        
        # –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è —Ç—Ä–∞–Ω—Å–∫—Ä–∏–±–µ—Ä–∞
        transcriber = AudioTranscriber(config['api_key'], config['model'])
        
        # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ Excel —à–∞–±–ª–æ–Ω—É —è–∫—â–æ –≤–∫–ª—é—á–µ–Ω–∞ Excel –æ–±—Ä–æ–±–∫–∞
        excel_available = False
        if config['enable_excel_processing']:
            excel_available = check_excel_template(config['excel_file'])
            if excel_available:
                logging.info("‚úÖ Excel —ñ–Ω—Ç–µ–≥—Ä–∞—Ü—ñ—è –∞–∫—Ç–∏–≤–Ω–∞")
                # –°—Ç–≤–æ—Ä—é—î–º–æ –¥–∏—Ä–µ–∫—Ç–æ—Ä—ñ—é –¥–ª—è Excel —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ñ–≤
                os.makedirs(config['excel_output_dir'], exist_ok=True)
            else:
                logging.warning("‚ö†Ô∏è Excel —ñ–Ω—Ç–µ–≥—Ä–∞—Ü—ñ—è –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞, –ø—Ä–∞—Ü—é—î–º–æ –≤ –∑–≤–∏—á–∞–π–Ω–æ–º—É —Ä–µ–∂–∏–º—ñ")
        
        # –ü–∞–∫–µ—Ç–Ω–∞ –æ–±—Ä–æ–±–∫–∞ —è–∫—â–æ –≤–∫–ª—é—á–µ–Ω–∞
        if config['batch_processing'] and excel_available:
            run_batch_processing(
                transcriber,
                config['folder'],
                config['excel_file'],
                config['supported_formats'],
                config['excel_output_dir']
            )
            logging.info("–ü–∞–∫–µ—Ç–Ω—É –æ–±—Ä–æ–±–∫—É –∑–∞–≤–µ—Ä—à–µ–Ω–æ. –ü–µ—Ä–µ—Ö–æ–¥–∏–º–æ –¥–æ –º–æ–Ω—ñ—Ç–æ—Ä–∏–Ω–≥—É...")
        
        # –û–±—Ä–æ–±–∫–∞ —ñ—Å–Ω—É—é—á–∏—Ö —Ñ–∞–π–ª—ñ–≤ (–∑–≤–∏—á–∞–π–Ω–∏–π —Ä–µ–∂–∏–º —è–∫—â–æ Excel –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∏–π)
        if not config['batch_processing'] or not excel_available:
            logging.info("–ü–æ—á–∞—Ç–æ–∫ –æ–±—Ä–æ–±–∫–∏ —ñ—Å–Ω—É—é—á–∏—Ö —Ñ–∞–π–ª—ñ–≤...")
            process_existing_files(
                config['folder'],
                transcriber,
                config['supported_formats'],
                config['max_file_size']
            )
        
        # –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –º–æ–Ω—ñ—Ç–æ—Ä–∏–Ω–≥—É –ø–∞–ø–∫–∏
        event_handler = AudioFileHandler(
            transcriber,
            config['folder'],
            config['supported_formats'],
            config['max_file_size'],
            excel_file=config['excel_file'] if excel_available else None,
            excel_output_dir=config['excel_output_dir'] if excel_available else None,
            enable_excel=excel_available
        )
        
        observer = Observer()
        observer.schedule(event_handler, config['folder'], recursive=True)
        
        # –ó–∞–ø—É—Å–∫ –º–æ–Ω—ñ—Ç–æ—Ä–∏–Ω–≥—É
        observer.start()
        logging.info(f"–†–æ–∑–ø–æ—á–∞—Ç–æ –º–æ–Ω—ñ—Ç–æ—Ä–∏–Ω–≥ –ø–∞–ø–∫–∏: {config['folder']}")
        
        # –Ü–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è –ø—Ä–æ —Ä–µ–∂–∏–º —Ä–æ–±–æ—Ç–∏
        if excel_available:
            logging.info("üìä –†–µ–∂–∏–º —Ä–æ–±–æ—Ç–∏: –¢—Ä–∞–Ω—Å–∫—Ä–∏–±–∞—Ü—ñ—è + Excel –∞–Ω–∞–ª—ñ–∑")
            logging.info(f"   üìã Excel —à–∞–±–ª–æ–Ω: {config['excel_file']}")
            logging.info(f"   üìÅ –†–µ–∑—É–ª—å—Ç–∞—Ç–∏: {config['excel_output_dir']}")
        else:
            logging.info("üìù –†–µ–∂–∏–º —Ä–æ–±–æ—Ç–∏: –¢—ñ–ª—å–∫–∏ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–±–∞—Ü—ñ—è")
        
        logging.info("–ù–∞—Ç–∏—Å–Ω—ñ—Ç—å Ctrl+C –¥–ª—è –∑—É–ø–∏–Ω–∫–∏ –ø—Ä–æ–≥—Ä–∞–º–∏")
        
        try:
            while True:
                time.sleep(1)
        except KeyboardInterrupt:
            observer.stop()
            logging.info("–ü—Ä–æ–≥—Ä–∞–º—É –∑—É–ø–∏–Ω–µ–Ω–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–µ–º")
        
        observer.join()
        
    except Exception as e:
        logging.error(f"–ö—Ä–∏—Ç–∏—á–Ω–∞ –ø–æ–º–∏–ª–∫–∞: {str(e)}")
        return 1
    
    return 0

if __name__ == "__main__":
    exit(main())