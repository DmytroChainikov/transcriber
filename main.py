import os
import time
import logging
import argparse
from dotenv import load_dotenv

from transcriber import AudioTranscriber
from google_drive_file_handler import GoogleDriveFileHandler
from processed_files_tracker import ProcessedFilesTracker

# –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –ª–æ–≥—É–≤–∞–Ω–Ω—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(levelname)s - %(message)s',
    handlers=[
        logging.FileHandler('transcriber.log', encoding='utf-8'),
        logging.StreamHandler()
    ]
)

def load_config():
    """
    –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—ó –∑ .env —Ñ–∞–π–ª—É
    
    Returns:
        dict: –°–ª–æ–≤–Ω–∏–∫ –∑ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è–º–∏
    """
    load_dotenv()
    
    config = {
        # Gemini API
        'api_key': os.getenv('GEMINI_API_KEY'),
        'model': os.getenv('GEMINI_MODEL', 'gemini-2.5-flash'),
        
        # Google Cloud credentials
        'google_credentials': os.getenv('GOOGLE_CREDENTIALS_PATH'),
        
        # Google Drive & Sheets
        'drive_folder_id': os.getenv('DRIVE_FOLDER_ID'),
        'spreadsheet_id': os.getenv('SPREADSHEET_ID'),
        'worksheet_name': os.getenv('WORKSHEET_NAME'),
        
        # –ó–∞–≥–∞–ª—å–Ω—ñ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è
        'supported_formats': os.getenv('SUPPORTED_FORMATS', '.mp3,.wav,.m4a,.aac,.ogg').split(','),
        'max_file_size': int(os.getenv('MAX_FILE_SIZE_MB', 20)),
        'check_interval': int(os.getenv('CHECK_INTERVAL_SEC', 60)),
        
        # –õ–æ–∫–∞–ª—å–Ω–µ –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ç—ñ–≤
        'local_transcripts_folder': os.getenv('LOCAL_TRANSCRIPTS_FOLDER', 'transcripts')
    }
    
    # –í–∞–ª—ñ–¥–∞—Ü—ñ—è –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—ó
    if not config['api_key']:
        raise ValueError("GEMINI_API_KEY –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ –≤ .env —Ñ–∞–π–ª—ñ")
    
    if not config['google_credentials']:
        raise ValueError("GOOGLE_CREDENTIALS_PATH –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ –≤ .env —Ñ–∞–π–ª—ñ")
    if not config['drive_folder_id']:
        raise ValueError("DRIVE_FOLDER_ID –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ –≤ .env —Ñ–∞–π–ª—ñ")
    if not config['spreadsheet_id']:
        raise ValueError("SPREADSHEET_ID –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ –≤ .env —Ñ–∞–π–ª—ñ")
    
    return config

def main():
    """–ì–æ–ª–æ–≤–Ω–∞ —Ñ—É–Ω–∫—Ü—ñ—è –ø—Ä–æ–≥—Ä–∞–º–∏"""
    # –ü–∞—Ä—Å–∏–º–æ –∞—Ä–≥—É–º–µ–Ω—Ç–∏ –∫–æ–º–∞–Ω–¥–Ω–æ–≥–æ —Ä—è–¥–∫–∞
    parser = argparse.ArgumentParser(description='Audio Transcriber –∑ –ø—ñ–¥—Ç—Ä–∏–º–∫–æ—é Google Cloud')
    parser.add_argument('--clear-history', action='store_true',
                       help='–û—á–∏—Å—Ç–∏—Ç–∏ —ñ—Å—Ç–æ—Ä—ñ—é –æ–±—Ä–æ–±–ª–µ–Ω–∏—Ö —Ñ–∞–π–ª—ñ–≤')
    parser.add_argument('--show-stats', action='store_true',
                       help='–ü–æ–∫–∞–∑–∞—Ç–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –æ–±—Ä–æ–±–ª–µ–Ω–∏—Ö —Ñ–∞–π–ª—ñ–≤')
    parser.add_argument('--remove-file', type=str,
                       help='–í–∏–¥–∞–ª–∏—Ç–∏ —Ñ–∞–π–ª –∑ —ñ—Å—Ç–æ—Ä—ñ—ó (–≤–∫–∞–∑–∞—Ç–∏ ID –∞–±–æ —à–ª—è—Ö)')
    args = parser.parse_args()
    
    try:
        # –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—ó
        config = load_config()
        
        # –§–∞–π–ª —Ç—Ä–µ–∫–µ—Ä–∞ –¥–ª—è Google Drive —Ä–µ–∂–∏–º—É
        tracker_file = "processed_files_drive.json"
        
        # –û–±—Ä–æ–±–∫–∞ –∫–æ–º–∞–Ω–¥ –∫–µ—Ä—É–≤–∞–Ω–Ω—è —ñ—Å—Ç–æ—Ä—ñ—î—é
        if args.show_stats:
            tracker = ProcessedFilesTracker(tracker_file)
            tracker.print_stats()
            return
        
        if args.clear_history:
            response = input("‚ö†Ô∏è  –í–∏ –≤–ø–µ–≤–Ω–µ–Ω—ñ —â–æ —Ö–æ—á–µ—Ç–µ –æ—á–∏—Å—Ç–∏—Ç–∏ —ñ—Å—Ç–æ—Ä—ñ—é? (yes/no): ")
            if response.lower() == 'yes':
                tracker = ProcessedFilesTracker(tracker_file)
                tracker.clear_history()
                logging.info("‚úÖ –Ü—Å—Ç–æ—Ä—ñ—é –æ—á–∏—â–µ–Ω–æ")
            else:
                logging.info("‚ùå –û–ø–µ—Ä–∞—Ü—ñ—é —Å–∫–∞—Å–æ–≤–∞–Ω–æ")
            return
        
        if args.remove_file:
            tracker = ProcessedFilesTracker(tracker_file)
            tracker.remove_file(args.remove_file)
            return
        
        # –ó–≤–∏—á–∞–π–Ω–∏–π –∑–∞–ø—É—Å–∫
        logging.info("üåê –ó–∞–ø—É—Å–∫ —É —Ä–µ–∂–∏–º—ñ Google Cloud")
        
        # –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è —Ç—Ä–∞–Ω—Å–∫—Ä–∏–±–µ—Ä–∞
        transcriber = AudioTranscriber(
            config['api_key'], 
            config['model'],
            google_credentials_file=config.get('google_credentials')
        )
        
        # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ Google API handlers
        if not transcriber.drive_handler or not transcriber.sheets_handler:
            raise RuntimeError("–ù–µ –≤–¥–∞–ª–æ—Å—è —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑—É–≤–∞—Ç–∏ Google API handlers")
        
        logging.info(f"   üìÅ Drive Folder ID: {config['drive_folder_id']}")
        logging.info(f"   üìä Spreadsheet ID: {config['spreadsheet_id']}")
        logging.info(f"   üíæ –õ–æ–∫–∞–ª—å–Ω–µ –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è: {config['local_transcripts_folder']}/")
        
        # –°—Ç–≤–æ—Ä–µ–Ω–Ω—è –ø–∞–ø–∫–∏ –¥–ª—è –ª–æ–∫–∞–ª—å–Ω–∏—Ö —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ç—ñ–≤
        os.makedirs(config['local_transcripts_folder'], exist_ok=True)
        
        # –°—Ç–≤–æ—Ä—é—î–º–æ file handler –¥–ª—è Google Drive
        drive_file_handler = GoogleDriveFileHandler(
            transcriber=transcriber,
            drive_handler=transcriber.drive_handler,
            drive_folder_id=config['drive_folder_id'],
            spreadsheet_id=config['spreadsheet_id'],
            worksheet_name=config.get('worksheet_name'),
            supported_formats=config['supported_formats'],
            max_file_size=config['max_file_size'],
            local_transcripts_folder=config['local_transcripts_folder']
        )
        
        # –û–±—Ä–æ–±–∫–∞ —ñ—Å–Ω—É—é—á–∏—Ö —Ñ–∞–π–ª—ñ–≤
        logging.info("–û–±—Ä–æ–±–∫–∞ —ñ—Å–Ω—É—é—á–∏—Ö —Ñ–∞–π–ª—ñ–≤ –Ω–∞ Google Drive...")
        drive_file_handler.process_existing_files()
        
        # –ó–∞–ø—É—Å–∫ –º–æ–Ω—ñ—Ç–æ—Ä–∏–Ω–≥—É
        logging.info(f"–ü–æ—á–∞—Ç–æ–∫ –º–æ–Ω—ñ—Ç–æ—Ä–∏–Ω–≥—É Google Drive (—ñ–Ω—Ç–µ—Ä–≤–∞–ª: {config['check_interval']}—Å)")
        logging.info("–î–ª—è –∑—É–ø–∏–Ω–∫–∏ –Ω–∞—Ç–∏—Å–Ω—ñ—Ç—å Ctrl+C")
        drive_file_handler.monitor_folder(check_interval=config['check_interval'])
        
    except Exception as e:
        logging.error(f"–ö—Ä–∏—Ç–∏—á–Ω–∞ –ø–æ–º–∏–ª–∫–∞: {str(e)}")
        return 1
    
    return 0

if __name__ == "__main__":
    exit(main())