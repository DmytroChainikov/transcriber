import logging
import time
import os
from typing import Set, Dict, Any
from processed_files_tracker import ProcessedFilesTracker


class GoogleDriveFileHandler:
    """–û–±—Ä–æ–±–Ω–∏–∫ –¥–ª—è –º–æ–Ω—ñ—Ç–æ—Ä–∏–Ω–≥—É —Ç–∞ –æ–±—Ä–æ–±–∫–∏ –Ω–æ–≤–∏—Ö –∞—É–¥—ñ–æ —Ñ–∞–π–ª—ñ–≤ –Ω–∞ Google Drive"""
    
    def __init__(self, transcriber, drive_handler, drive_folder_id: str, 
                 spreadsheet_id: str, worksheet_name: str = None,
                 supported_formats: list = None, max_file_size: int = 20,
                 local_transcripts_folder: str = 'transcripts'):
        """
        –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑—É—î –æ–±—Ä–æ–±–Ω–∏–∫ —Ñ–∞–π–ª—ñ–≤ Google Drive
        
        Args:
            transcriber: –ï–∫–∑–µ–º–ø–ª—è—Ä AudioTranscriber
            drive_handler: –ï–∫–∑–µ–º–ø–ª—è—Ä GoogleDriveHandler
            drive_folder_id (str): ID –ø–∞–ø–∫–∏ –Ω–∞ Google Drive
            spreadsheet_id (str): ID Google Sheets –¥–æ–∫—É–º–µ–Ω—Ç—É
            worksheet_name (str): –ù–∞–∑–≤–∞ –∞—Ä–∫—É—à—É (–æ–ø—Ü—ñ–π–Ω–æ)
            supported_formats (list): –ü—ñ–¥—Ç—Ä–∏–º—É–≤–∞–Ω—ñ —Ñ–æ—Ä–º–∞—Ç–∏ —Ñ–∞–π–ª—ñ–≤
            max_file_size (int): –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∏–π —Ä–æ–∑–º—ñ—Ä —Ñ–∞–π–ª—É –≤ MB
            local_transcripts_folder (str): –ü–∞–ø–∫–∞ –¥–ª—è –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ç—ñ–≤
        """
        self.transcriber = transcriber
        self.drive_handler = drive_handler
        self.drive_folder_id = drive_folder_id
        self.spreadsheet_id = spreadsheet_id
        self.worksheet_name = worksheet_name
        self.supported_formats = [fmt.lower() for fmt in (supported_formats or ['.mp3', '.wav', '.m4a'])]
        self.max_file_size = max_file_size * 1024 * 1024  # –ü–µ—Ä–µ—Ç–≤–æ—Ä–µ–Ω–Ω—è –≤ –±–∞–π—Ç–∏
        self.processed_files: Set[str] = set()  # –ú–Ω–æ–∂–∏–Ω–∞ ID –æ–±—Ä–æ–±–ª–µ–Ω–∏—Ö —Ñ–∞–π–ª—ñ–≤
        self.local_transcripts_folder = local_transcripts_folder
        
        # –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑—É—î–º–æ —Ç—Ä–µ–∫–µ—Ä
        self.tracker = ProcessedFilesTracker("processed_files_drive.json")
        logging.info("–Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–æ–≤–∞–Ω–æ Google Drive File Handler")
        self.tracker.print_stats()
    
    def process_audio_file(self, file_metadata: Dict[str, Any]):
        """
        –û–±—Ä–æ–±–∫–∞ –∞—É–¥—ñ–æ —Ñ–∞–π–ª—É –∑ Google Drive
        
        Args:
            file_metadata (Dict[str, Any]): –ú–µ—Ç–∞–¥–∞–Ω—ñ —Ñ–∞–π–ª—É –∑ Drive API
        """
        try:
            file_id = file_metadata['id']
            file_name = file_metadata['name']
            file_size = int(file_metadata.get('size', 0))
            
            # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —Ä–æ–∑–º—ñ—Ä—É —Ñ–∞–π–ª—É
            if file_size > self.max_file_size:
                logging.warning(f"–§–∞–π–ª {file_name} –∑–∞–≤–µ–ª–∏–∫–∏–π ({file_size / 1024 / 1024:.1f} MB)")
                return
            
            # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —á–∏ —Ñ–∞–π–ª –≤–∂–µ –±—É–≤ –æ–±—Ä–æ–±–ª–µ–Ω–∏–π (—á–µ—Ä–µ–∑ —Ç—Ä–µ–∫–µ—Ä)
            if self.tracker.is_processed(file_id):
                logging.info(f"‚è≠Ô∏è –ü—Ä–æ–ø—É—Å–∫–∞—î–º–æ –≤–∂–µ –æ–±—Ä–æ–±–ª–µ–Ω–∏–π —Ñ–∞–π–ª: {file_name}")
                return
            
            # –î–æ–¥–∞—î–º–æ –¥–æ —Ç–∏–º—á–∞—Å–æ–≤–æ—ó –º–Ω–æ–∂–∏–Ω–∏ –¥–ª—è –ø–æ—Ç–æ—á–Ω–æ—ó —Å–µ—Å—ñ—ó
            if file_id in self.processed_files:
                return
            
            logging.info(f"üéµ –û–±—Ä–æ–±–∫–∞ –Ω–æ–≤–æ–≥–æ –∞—É–¥—ñ–æ —Ñ–∞–π–ª—É –∑ Drive: {file_name}")
            
            # –ü–æ–≤–Ω–∞ –æ–±—Ä–æ–±–∫–∞ –∑ Google Sheets —ñ–Ω—Ç–µ–≥—Ä–∞—Ü—ñ—î—é —Ç–∞ –ª–æ–∫–∞–ª—å–Ω–∏–º –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è–º
            result = self.transcriber.process_and_update_sheets(
                audio_file_id=file_id,
                drive_folder_id=self.drive_folder_id,
                spreadsheet_id=self.spreadsheet_id,
                worksheet_name=self.worksheet_name
            )
            
            # –õ–æ–∫–∞–ª—å–Ω–µ –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ç—É
            if result['success'] and result.get('transcript'):
                try:
                    # –°—Ç–≤–æ—Ä—é—î–º–æ —ñ–º'—è —Ñ–∞–π–ª—É –¥–ª—è –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è
                    base_name = file_name.rsplit('.', 1)[0]
                    local_transcript_path = os.path.join(
                        self.local_transcripts_folder, 
                        f"{base_name}_transcript.txt"
                    )
                    
                    # –ó–±–µ—Ä—ñ–≥–∞—î–º–æ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ç
                    with open(local_transcript_path, 'w', encoding='utf-8') as f:
                        f.write(result['transcript'])
                    
                    logging.info(f"üíæ –¢—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ç –∑–±–µ—Ä–µ–∂–µ–Ω–æ –ª–æ–∫–∞–ª—å–Ω–æ: {local_transcript_path}")
                except Exception as e:
                    logging.error(f"–ü–æ–º–∏–ª–∫–∞ –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ç—É: {e}")
            
            # –ó–±–µ—Ä—ñ–≥–∞—î–º–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤ —Ç—Ä–µ–∫–µ—Ä—ñ
            if result['success']:
                self.tracker.mark_as_processed(
                    file_id=file_id,
                    file_name=file_name,
                    success=True,
                    row_number=result.get('written_row')
                )
                logging.info(f"‚úÖ –§–∞–π–ª –æ–±—Ä–æ–±–ª–µ–Ω–æ: {file_name}")
                logging.info(f"   üìã Spreadsheet ID: {self.spreadsheet_id}")
                logging.info(f"   üìç –†—è–¥–æ–∫: {result.get('written_row', 'N/A')}")
            else:
                self.tracker.mark_as_processed(
                    file_id=file_id,
                    file_name=file_name,
                    success=False,
                    error=result.get('error')
                )
                logging.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –æ–±—Ä–æ–±–∫–∏: {result.get('error', '–ù–µ–≤—ñ–¥–æ–º–∞ –ø–æ–º–∏–ª–∫–∞')}")
            
            # –î–æ–¥–∞–≤–∞–Ω–Ω—è –¥–æ —Å–ø–∏—Å–∫—É –æ–±—Ä–æ–±–ª–µ–Ω–∏—Ö —Ñ–∞–π–ª—ñ–≤ –ø–æ—Ç–æ—á–Ω–æ—ó —Å–µ—Å—ñ—ó
            self.processed_files.add(file_id)
            
        except Exception as e:
            logging.error(f"–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ–±—Ä–æ–±—Ü—ñ —Ñ–∞–π–ª—É {file_metadata.get('name', 'unknown')}: {str(e)}")
    
    def monitor_folder(self, check_interval: int = 60):
        """
        –ú–æ–Ω—ñ—Ç–æ—Ä–∏–Ω–≥ –ø–∞–ø–∫–∏ Google Drive –Ω–∞ –Ω–æ–≤—ñ —Ñ–∞–π–ª–∏
        
        Args:
            check_interval (int): –Ü–Ω—Ç–µ—Ä–≤–∞–ª –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ –≤ —Å–µ–∫—É–Ω–¥–∞—Ö
        """
        logging.info(f"–ü–æ—á–∞—Ç–æ–∫ –º–æ–Ω—ñ—Ç–æ—Ä–∏–Ω–≥—É Google Drive –ø–∞–ø–∫–∏ (—ñ–Ω—Ç–µ—Ä–≤–∞–ª: {check_interval}—Å)")
        logging.info(f"–ü–∞–ø–∫–∞ ID: {self.drive_folder_id}")
        logging.info(f"Spreadsheet ID: {self.spreadsheet_id}")
        
        try:
            while True:
                # –û—Ç—Ä–∏–º—É—î–º–æ –≤—Å—ñ –∞—É–¥—ñ–æ —Ñ–∞–π–ª–∏ –∑ –ø–∞–ø–∫–∏
                files = self.drive_handler.list_files(
                    self.drive_folder_id,
                    file_extensions=self.supported_formats
                )
                
                # –û–±—Ä–æ–±–ª—è—î–º–æ –Ω–æ–≤—ñ —Ñ–∞–π–ª–∏
                for file_metadata in files:
                    file_id = file_metadata['id']
                    if file_id not in self.processed_files:
                        self.process_audio_file(file_metadata)
                
                # –ß–µ–∫–∞—î–º–æ –ø–µ—Ä–µ–¥ –Ω–∞—Å—Ç—É–ø–Ω–æ—é –ø–µ—Ä–µ–≤—ñ—Ä–∫–æ—é
                time.sleep(check_interval)
                
        except KeyboardInterrupt:
            logging.info("–ú–æ–Ω—ñ—Ç–æ—Ä–∏–Ω–≥ –∑—É–ø–∏–Ω–µ–Ω–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–µ–º")
        except Exception as e:
            logging.error(f"–ü–æ–º–∏–ª–∫–∞ –º–æ–Ω—ñ—Ç–æ—Ä–∏–Ω–≥—É: {e}")
    
    def process_existing_files(self):
        """
        –û–±—Ä–æ–±–∫–∞ –≤—Å—ñ—Ö —ñ—Å–Ω—É—é—á–∏—Ö —Ñ–∞–π–ª—ñ–≤ —É –ø–∞–ø—Ü—ñ Drive
        """
        logging.info("–ü–æ—á–∞—Ç–æ–∫ –æ–±—Ä–æ–±–∫–∏ —ñ—Å–Ω—É—é—á–∏—Ö —Ñ–∞–π–ª—ñ–≤ –Ω–∞ Google Drive")
        
        try:
            files = self.drive_handler.list_files(
                self.drive_folder_id,
                file_extensions=self.supported_formats
            )
            
            total_files = len(files)
            new_files = 0
            skipped_files = 0
            
            logging.info(f"–ó–Ω–∞–π–¥–µ–Ω–æ {total_files} —Ñ–∞–π–ª—ñ–≤")
            
            for file_metadata in files:
                file_id = file_metadata['id']
                
                # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —á–∏ —Ñ–∞–π–ª –≤–∂–µ –æ–±—Ä–æ–±–ª–µ–Ω–æ
                if self.tracker.is_processed(file_id):
                    skipped_files += 1
                else:
                    new_files += 1
                    self.process_audio_file(file_metadata)
            
            logging.info(f"‚úÖ –û–±—Ä–æ–±–ª–µ–Ω–æ –Ω–æ–≤–∏—Ö —Ñ–∞–π–ª—ñ–≤: {new_files}")
            logging.info(f"‚è≠Ô∏è –ü—Ä–æ–ø—É—â–µ–Ω–æ (–≤–∂–µ –æ–±—Ä–æ–±–ª–µ–Ω–∏—Ö): {skipped_files}")
            logging.info("–û–±—Ä–æ–±–∫–∞ —ñ—Å–Ω—É—é—á–∏—Ö —Ñ–∞–π–ª—ñ–≤ –∑–∞–≤–µ—Ä—à–µ–Ω–∞")
            self.tracker.print_stats()
            
        except Exception as e:
            logging.error(f"–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ–±—Ä–æ–±—Ü—ñ —ñ—Å–Ω—É—é—á–∏—Ö —Ñ–∞–π–ª—ñ–≤: {e}")
